plugins {
    id 'java'
    id 'application'
    id 'net.researchgate.release' version '2.8.1'
    id "maven-publish"
    id "org.hidetake.ssh" version "2.10.1"
}


group 'com.github.simkuenzi'
version version

java {
    sourceCompatibility JavaVersion.VERSION_14
    targetCompatibility JavaVersion.VERSION_14
}

application {
    mainClass = 'com.github.simkuenzi.foweb.Server'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases'
    }
}

dependencies {
    implementation group: 'io.javalin', name: 'javalin', version: '3.9.1'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    implementation(group: 'org.apache.xmlgraphics', name: 'fop', version: '2.5') {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
    implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '10.2'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': "${project.name} server",
                'Implementation-Version': this.version,
                'Main-Class': 'com.github.simkuenzi.foweb.Server'
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/simkuenzi/foweb")
            credentials {
                username = project.ext.properties.gitUser
                password = project.ext.properties.gitToken
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

remotes {
    webServer {
        host = project.ext.properties.deployServer
        user = project.ext.properties.deployUser
        identity = file(project.ext.properties.deployKey ?: 'id_rsa')
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        File d = new File("$buildDir/resources/main/com/github/simkuenzi/foweb")
        d.mkdirs()
        new File(d, "version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

task deploy(dependsOn: jar) {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: file("build/distributions/${project.name}-${project.version}.tar"), into: "${project.ext.properties.deployPath}/${project.name}/${project.name}.tar"
                execute "rm -rf ${project.ext.properties.deployPath}/${project.name}/dist"
                execute "mkdir ${project.ext.properties.deployPath}/${project.name}/dist"
                execute "tar -xf ${project.ext.properties.deployPath}/${project.name}/${project.name}.tar --strip-components=1 -C ${project.ext.properties.deployPath}/${project.name}/dist"
                execute "touch ${project.ext.properties.deployPath}/${project.name}/restart"
            }
        }
    }
}

classes {
    dependsOn createProperties
}

release {
    buildTasks = ['publish', 'deploy']
}
